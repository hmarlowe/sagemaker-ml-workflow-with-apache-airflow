AWSTemplateFormatVersion: "2010-09-09"

Description: Airflow server backed by Postgres RDS

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access into the Airflow web server
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair
  DBPassword:
    NoEcho: "true"
    Description: Airflow database admin account password
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: Must contain only alphanumeric characters
  VpcCIDR:
      Description: Please enter the IP range (CIDR notation) for this VPC
      Type: String
      Default: 10.0.0.0/16
  PublicSubnet1CIDR:
      Description: Please enter the IP range (CIDR notation) for the public subnet in the 1st Availability Zone
      Type: String
      Default: 10.0.0.0/24
  PublicSubnet2CIDR:
      Description: Please enter the IP range (CIDR notation) for the public subnet in the 2nd Availability Zone
      Type: String
      Default: 10.0.2.0/24
  PrivateSubnet1CIDR:
      Description: Please enter the IP range (CIDR notation) for the private subnet in the 1st Availability Zone
      Type: String
      Default: 10.0.1.0/24
  PrivateSubnet2CIDR:
      Description: Please enter the IP range (CIDR notation) for the private subnet in the 2nd Availability Zone
      Type: String
      Default: 10.0.3.0/24

# Mapping to find the Amazon Linux AMI in each region.
Mappings:
  RegionMap:
    ap-northeast-1:
      AMI: "ami-06cd52961ce9f0d85"
    ap-northeast-2:
      AMI: "ami-0a10b2721688ce9d2"
    ap-northeast-3:
      AMI: "ami-0d98120a9fb693f07"
    ap-south-1:
      AMI: "ami-0912f71e06545ad88"
    ap-southeast-1:
      AMI: "ami-08569b978cc4dfa10"
    ap-southeast-2:
      AMI: "ami-09b42976632b27e9b"
    ca-central-1:
      AMI: "ami-0b18956f"
    eu-central-1:
      AMI: "ami-0233214e13e500f77"
    eu-west-1:
      AMI: "ami-047bb4163c506cd98"
    eu-west-2:
      AMI: "ami-f976839e"
    eu-west-3:
      AMI: "ami-0ebc281c20e89ba4b"
    sa-east-1:
      AMI: "ami-07b14488da8ea02a0"
    us-east-1:
      AMI: "ami-0b898040803850657"
    us-east-2:
      AMI: "ami-0b59bfac6be064b78"
    us-west-1:
      AMI: "ami-0bdb828fd58c52235"
    us-west-2:
      AMI: "ami-a0cfeed8"
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref "KeyName"
      SecurityGroupIds: 
        - !Ref AirflowEC2SecurityGroup
      InstanceType: "m4.xlarge"
      SubnetId: !Ref PublicSubnet1
      IamInstanceProfile:
        Ref: EC2InstanceProfile
      Tags:
        - Key: Name
          Value: Airflow
      ImageId: !FindInMap
        - RegionMap
        - !Ref "AWS::Region"
        - AMI
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -x
          exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1
          # Start cfn-init
          /opt/aws/bin/cfn-init -v -c install --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}
          # Install pip and setuptools
          yum install -y python-pip python python-setuptools
          # Install airflow using pip
          yum group install -y "Development Tools"
          echo "Installing Apache Airflow"
          export AIRFLOW_HOME=~/airflow
          export AIRFLOW_GPL_UNIDECODE=yes
          # Encrypt connection passwords in metadata db
          python -m pip install --upgrade apache-airflow[crypto,postgres,s3] --user
          python -m pip install --upgrade six markupsafe psycopg2==2.7.3.2 --user
          echo 'export PATH=/usr/local/bin:~/.local/bin:$PATH' >> ~/.bash_profile
          source ~/.bash_profile
          # Install pandas and numpy for data processing
          echo "Installing py dependencies"
          python -m pip install --upgrade numpy pandas s3fs sagemaker boto3 --user
          echo "Pinning Flask version to avoid json error"
          python -m pip install Flask==1.0.4 --user
          echo "Upgrading werkzeug version due to depreciation"
          python -m pip install werkzeug>=0.15.0 --user
          # Initialize Airflow
          airflow initdb
          # Update the RDS connection in the Airflow Config file
          sed -i '/sql_alchemy_conn/s/^/#/g' ~/airflow/airflow.cfg
          sed -i '/sql_alchemy_conn/ a sql_alchemy_conn = postgresql://airflow:${DBPassword}@${DBInstance.Endpoint.Address}:${DBInstance.Endpoint.Port}/airflowdb' ~/airflow/airflow.cfg
          # Update the type of executor in the Airflow Config file
          sed -i '/executor = SequentialExecutor/s/^/#/g' ~/airflow/airflow.cfg
          sed -i '/executor = SequentialExecutor/ a executor = LocalExecutor' ~/airflow/airflow.cfg
          airflow initdb
          # create airflow connection to sagemaker
          cat >> /tmp/airflow_conn.py << EOF
          from airflow import settings
          from airflow.models import Connection
          #create a connection object
          extra = '{"region_name": "${AWS::Region}"}'
          conn_id = 'airflow-sagemaker'
          conn = Connection(conn_id=conn_id,conn_type='aws', extra=extra)
          # get the session
          session = settings.Session()
          session.add(conn)
          session.commit()
          EOF
          python /tmp/airflow_conn.py
          # create directories
          mkdir -p ~/airflow/dags/sm-ml-pipeline
          # clone the git repository
          cd ~
          git clone --single-branch --branch update-blog https://github.com/hmarlowe/sagemaker-ml-workflow-with-apache-airflow.git
          #git clone https://github.com/aws-samples/sagemaker-ml-workflow-with-apache-airflow.git
          mv ~/sagemaker-ml-workflow-with-apache-airflow ~/sm-ml-pipeline
          cd ~/sm-ml-pipeline/src
          # prepare airflow dag definition for sagemaker blog post
          sed -i 's/<execution-role>/${AirflowSageMakerExecutionRole}/g' ./*.*
          sed -i 's/<s3-bucket>/${S3Bucket}/g' ./*.*
          sed -i 's/<region-name>/${AWS::Region}/g' ./*.*
          zip -r dag.zip *
          cp dag.zip ~/airflow/dags/sm-ml-pipeline/dag.zip
          cd -
          # Run Airflow webserver and scheduler
          airflow resetdb
          airflow initdb
          airflow list_dags
          airflow webserver -D
          airflow scheduler -D
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          install:
            - gcc
        gcc:
          packages:
            yum:
              gcc: []
    DependsOn:
      - DBInstance
      - AirflowEC2SecurityGroup
  DBInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBName: airflowdb
      Engine: postgres
      MasterUsername: airflow
      MasterUserPassword: !Ref "DBPassword"
      DBInstanceClass: db.t2.small
      AllocatedStorage: 5
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBSecurityGroups:
        - Ref: DBSecurityGroup
  AirflowEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 + SSH access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      GroupDescription: Frontend Access
      EC2VpcId: !Ref VPC
      DBSecurityGroupIngress:
        EC2SecurityGroupId:
          !GetAtt AirflowEC2SecurityGroup.GroupId
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Subnets where RDS can be deployed
      DBSubnetGroupName: RDSSubnetGroup
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [ Ref: 'AWS::StackName', 'AirflowInstanceRole' ]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Policies:
        - PolicyName: !Join ['-', [ Ref: 'AWS::StackName', 'AirflowResourceAccess' ]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}"
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"
              - Effect: Allow
                Action:
                  - iam:GetRole
                Resource: "*"
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join ['-', [ Ref: 'AWS::StackName', 'AirflowInstanceProfile' ]]
      Roles:
        - Ref: EC2Role
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Join ['-', [ Ref: 'AWS::StackName', 'airflowsagemakerbucket' ]]
  AirflowSageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [ Ref: 'AWS::StackName', 'AirflowSageMakerExecutionRole' ]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "sagemaker.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Path: "/service-role/"
      Policies:
        - PolicyName: SageMakerS3BucketAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}"
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"
  VPC:
      Type: AWS::EC2::VPC
      Properties:
          CidrBlock: !Ref VpcCIDR
          EnableDnsSupport: true
          EnableDnsHostnames: true
          Tags:
              - Key: Name
                Value: !Ref 'AWS::StackName'
  InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
          Tags:
              - Key: Name
                Value: !Ref 'AWS::StackName'
  InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          InternetGatewayId: !Ref InternetGateway
          VpcId: !Ref VPC
  PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs ]
          CidrBlock: !Ref PublicSubnet1CIDR
          MapPublicIpOnLaunch: true
          Tags:
              - Key: Name
                Value: !Join ['-', [ Ref: 'AWS::StackName', 'Public Subnet (AZ1)' ]]
  PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs ]
          CidrBlock: !Ref PublicSubnet2CIDR
          MapPublicIpOnLaunch: true
          Tags:
              - Key: Name
                Value: !Join ['-', [ Ref: 'AWS::StackName', 'Public Subnet (AZ2)' ]]
  PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs ]
          CidrBlock: !Ref PrivateSubnet1CIDR
          MapPublicIpOnLaunch: false
          Tags:
              - Key: Name
                Value: !Join ['-', [ Ref: 'AWS::StackName', 'Private Subnet (AZ1)' ]]
  PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs ]
          CidrBlock: !Ref PrivateSubnet2CIDR
          MapPublicIpOnLaunch: false
          Tags:
              - Key: Name
                Value: !Join ['-', [ Ref: 'AWS::StackName', 'Private Subnet (AZ2)' ]]
  NatGateway1EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
        Domain: vpc
  NatGateway2EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
        Domain: vpc
  NatGateway1:
      Type: AWS::EC2::NatGateway
      Properties:
          AllocationId: !GetAtt NatGateway1EIP.AllocationId
          SubnetId: !Ref PublicSubnet1
  NatGateway2:
      Type: AWS::EC2::NatGateway
      Properties:
          AllocationId: !GetAtt NatGateway2EIP.AllocationId
          SubnetId: !Ref PublicSubnet2
  PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
              - Key: Name
                Value: !Join ['-', [ Ref: 'AWS::StackName', 'Public Routes' ]]
  DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet2
  PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
              - Key: Name
                Value: !Join ['-', [ Ref: 'AWS::StackName', 'Private Routes (AZ1)' ]]
  DefaultPrivateRoute1:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTable1
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway1
  PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTable1
          SubnetId: !Ref PrivateSubnet1
  PrivateRouteTable2:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
              - Key: Name
                Value: !Join ['-', [ Ref: 'AWS::StackName', 'Private Routes (AZ2)' ]]
  DefaultPrivateRoute2:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTable2
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway2
  PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTable2
          SubnetId: !Ref PrivateSubnet2
Outputs:
  AirflowEC2PublicDNSName:
    Description: Public DNS Name of the Airflow EC2 instance
    Value: !Join ["", ["http://", !GetAtt EC2Instance.PublicDnsName, ":8080"]]